[project]
name = "try-mypy-type-dispatch"
description = "mypy examples dispatching based on function arguments"
readme = "README.md"
requires-python = ">=3.8"
license = { text = "GPL-3.0-only"}
authors = [
    { name = "Eric Berquist", email = "eric.berquist@gmail.com" },
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
    "typer",
]
dynamic = ["version"]

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project.scripts]
fibonacci = "try_mypy_type_dispatch.skeleton:app"

[tool.hatch.metadata]
# direct dependency references, e.g `pip @ git+https://github.com/pypa/pip.git@master`
allow-direct-references = true

[tool.hatch.version]
source = "vcs"
raw-options = { version_scheme = "no-guess-dev" }

[tool.hatch.build.hooks.vcs]
version-file = "src/try_mypy_type_dispatch/_version.py"

[tool.hatch.build]
packages = ["src/try_mypy_type_dispatch"]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
]

[tool.coverage.html]
directory = "build/coverage/htmlcov"

[tool.coverage.report]
# exclude_also requires 7.2.0+
exclude_lines = [
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if False:",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "\\w*pass$",

    # No implementation
    "@(abc\\.)?abstractmethod",
    # Type stub
    "\\w*\\.\\.\\.$",
]

[tool.coverage.run]
branch = true
data_file = "build/coverage/.coverage"
omit = [
    "_version.py",  # automatically created by hatch-vcs, not in repo
]

[tool.isort]
profile = "black"
line_length = 100
lines_after_imports = 2
py_version = "38"
# default is FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER
# Placing third-party imports at the end makes their inclusion more obvious
sections = [
    "FUTURE",
    "STDLIB",
    "FIRSTPARTY",
    "THIRDPARTY",
    "LOCALFOLDER",
]
verbose = true

[tool.mypy]
cache_dir = "build/.mypy_cache"
color_output = true
error_summary = true
pretty = true
strict = true

[tool.pytest.ini_options]
addopts = "--doctest-glob='*.md' --isort --ruff --ruff-format"
cache_dir = "build/.pytest_cache"

[tool.ruff]
cache-dir = "build/.ruff_cache"
include = [
    "src/**/*.py",
    "src/**/*.pyi",
    "tests/**/*.py",
    "tests/**/*.pyi"
]
line-length = 100
target-version = "py38"

[tool.ruff.format]
skip-magic-trailing-comma = true

[tool.ruff.lint]
extend-select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "RUF100", # Automatically remove unused # noqa directives
    "S",
    "SIM",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
ignore = [
    "E501",
    "EM102",
    "ISC001",
    "PLR0913",
]

[tool.ruff.lint.isort]
known-first-party = ["try_mypy_type_dispatch"]
lines-after-imports = 2
section-order = [
    "future",
    "standard-library",
    "first-party",
    "third-party",
    "local-folder",
]
split-on-trailing-comma = false

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.hatch.env]
requires = ["hatch-pip-compile~=1.11.1"]

[tool.hatch.envs.default]
python = "3.8"
post-install-commands = ["pre-commit install"]
type = "pip-compile"
pip-compile-constraint = "default"  # keep locks between default & others consistent
lock-filename = "locks/{env_name}.lock"
pip-compile-hashes = true
# specified in [project.dependencies]
dependencies = []
[tool.hatch.envs.default.scripts]
upgrade-all = "PIP_COMPILE_UPGRADE=1 hatch env run --env {env_name} -- python --version"
upgrade-pkg = "PIP_COMPILE_UPGRADE_PACKAGE='{args}' hatch env run --env {env_name} -- python --version"

[tool.hatch.envs.test]
dependencies = [
    "coverage[toml]",
    "pytest",
    "pytest-cov",
    "pytest-isort",
    "pytest-ruff",
]
[tool.hatch.envs.test.scripts]
cov = "python -m pytest --cov-report=term-missing --cov-report=html {args}"
no-cov = "cov --no-cov {args}"
debug = "cov --no-cov -s --pdb {args}"

# Removed in favor of explicit locked test env
# [tool.hatch.envs.hatch-test]
# extra-args = ["-v"]
# extra-dependencies = [
#     "isort",
#     "pytest-isort",
#     "pytest-ruff",
#     "ruff",
# ]
# [tool.hatch.envs.hatch-test.scripts]
# # defaults (required for any overrides)
# run = "pytest{env:HATCH_TEST_ARGS:} {args}"
# run-cov = "coverage run -m pytest{env:HATCH_TEST_ARGS:} {args}"
# cov-combine = "coverage combine"
# # override: add HTML generation
# cov-report = "coverage report; coverage html"

[tool.hatch.envs.format-and-lint]
dependencies = [
    # "hadolint-py @ git+https://github.com/AleksaC/hadolint-py.git@v2.12.1b3",
    "isort",
    "mypy",
    "ruff",
    # needed for mypy
    "pytest",
]
# TODO doesn't work as long as `extra-dependencies` aren't inherited
# extra-dependencies = [
#     "mypy",
# ]
# template = "hatch-test"
[tool.hatch.envs.format-and-lint.scripts]
docker = [
    "echo \"VERSION: `hadolint --version`\"",
    "hadolint {args:./Dockerfile}",
]
typing = [
    "echo \"VERSION: `mypy --version`\"",
    "mypy --install-types --non-interactive {args}"
]
style = [
    "isort --check-only {args:.}",
    "echo \"VERSION: `ruff --version`\"",
    "ruff check {args:.}",
    "ruff format --check {args:.}",
]
fix = [
    "isort {args:.}",
    "ruff format {args:.}",
    "ruff check --fix {args:.}",
    "style",  # feedback on what is not fixable
]
# don't include Docker by default
all = [
    "fix",
    "typing",
]
